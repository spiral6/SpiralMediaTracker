# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Character(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, actor=None, picture=None, actor_picture=None):  # noqa: E501
        """Character - a model defined in OpenAPI

        :param name: The name of this Character.  # noqa: E501
        :type name: str
        :param actor: The actor of this Character.  # noqa: E501
        :type actor: str
        :param picture: The picture of this Character.  # noqa: E501
        :type picture: str
        :param actor_picture: The actor_picture of this Character.  # noqa: E501
        :type actor_picture: str
        """
        self.openapi_types = {
            'name': str,
            'actor': str,
            'picture': str,
            'actor_picture': str
        }

        self.attribute_map = {
            'name': 'name',
            'actor': 'actor',
            'picture': 'picture',
            'actor_picture': 'actor_picture'
        }

        self._name = name
        self._actor = actor
        self._picture = picture
        self._actor_picture = actor_picture

    @classmethod
    def from_dict(cls, dikt) -> 'Character':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Character of this Character.  # noqa: E501
        :rtype: Character
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Character.


        :return: The name of this Character.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Character.


        :param name: The name of this Character.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def actor(self):
        """Gets the actor of this Character.


        :return: The actor of this Character.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this Character.


        :param actor: The actor of this Character.
        :type actor: str
        """

        self._actor = actor

    @property
    def picture(self):
        """Gets the picture of this Character.


        :return: The picture of this Character.
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this Character.


        :param picture: The picture of this Character.
        :type picture: str
        """

        self._picture = picture

    @property
    def actor_picture(self):
        """Gets the actor_picture of this Character.


        :return: The actor_picture of this Character.
        :rtype: str
        """
        return self._actor_picture

    @actor_picture.setter
    def actor_picture(self, actor_picture):
        """Sets the actor_picture of this Character.


        :param actor_picture: The actor_picture of this Character.
        :type actor_picture: str
        """

        self._actor_picture = actor_picture
