# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class StaffMediaList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, media_format=None, role=None):  # noqa: E501
        """StaffMediaList - a model defined in OpenAPI

        :param name: The name of this StaffMediaList.  # noqa: E501
        :type name: str
        :param media_format: The media_format of this StaffMediaList.  # noqa: E501
        :type media_format: str
        :param role: The role of this StaffMediaList.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'name': str,
            'media_format': str,
            'role': str
        }

        self.attribute_map = {
            'name': 'name',
            'media_format': 'media_format',
            'role': 'role'
        }

        self._name = name
        self._media_format = media_format
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'StaffMediaList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Staff_media_list of this StaffMediaList.  # noqa: E501
        :rtype: StaffMediaList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this StaffMediaList.


        :return: The name of this StaffMediaList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StaffMediaList.


        :param name: The name of this StaffMediaList.
        :type name: str
        """

        self._name = name

    @property
    def media_format(self):
        """Gets the media_format of this StaffMediaList.


        :return: The media_format of this StaffMediaList.
        :rtype: str
        """
        return self._media_format

    @media_format.setter
    def media_format(self, media_format):
        """Sets the media_format of this StaffMediaList.


        :param media_format: The media_format of this StaffMediaList.
        :type media_format: str
        """
        allowed_values = ["Movie", "Anime", "Game", "Book", "Comic", "Manga", "TV", "Music"]  # noqa: E501
        if media_format not in allowed_values:
            raise ValueError(
                "Invalid value for `media_format` ({0}), must be one of {1}"
                .format(media_format, allowed_values)
            )

        self._media_format = media_format

    @property
    def role(self):
        """Gets the role of this StaffMediaList.


        :return: The role of this StaffMediaList.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this StaffMediaList.


        :param role: The role of this StaffMediaList.
        :type role: str
        """

        self._role = role
