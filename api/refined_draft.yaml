swagger: "2.0"
info:
  description: "Testing API for Spiral Media Tracker"
  version: 0.1.0
  title: "Spiral Media Tracker"
  termsOfService: "http://spiral6.xyz/api/terms"
  contact:
    email: "admin@spiral6.xyz"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "localhost"
basePath: "/api"
tags:
- name: anime
  description: "Anime items endpoint."
  externalDocs:
    description: "Find out more"
    url: "http://spiral6.xyz/wiki/api/anime"
- name: movies
  description: "Movie items endpoint."
  externalDocs:
    description: "Find out more"
    url: "http://spiral6.xyz/wiki/api/movies"
schemes:
- https
- http
security:
  - api_key: []
paths:
  /anime:
    get:
      tags:
      - anime
      summary: "Get all anime."
      description: "Return all anime."
      operationId: "getAnime"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Operation successful."
    post:
      tags:
      - anime
      summary: "Add a new anime to the database."
      description: ""
      operationId: "addAnime"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: body
        name: "body"
        description: "Anime object that needs to be added to the database."
        required: true
        schema:
          $ref: "#/definitions/Anime"
      responses:
        405:
          description: "Invalid input."
      security:
        - mediatracker_auth: [write]
    put:
      tags:
        - anime
      summary: "Update an anime in the database."
      description: ""
      operationId: "updateAnime"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: body
        name: "body"
        description: "Anime object that needs to be added to the database."
        required: true
        schema:
          $ref: "#/definitions/Anime"
      responses:
        404:
          description: "Anime not found."
        405:
          description: "Validation exception."
      security:
        - mediatracker_auth: [write]
  /anime/{name}:
    get:
      tags:
      - anime
      summary: "Find anime by name."
      description: "Returns a single anime."
      operationId: "getAnimeByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        in: path
        description: "Name of anime to return."
        required: true
        type: string
      responses:
        200:
          description: "Operation succesful."
          schema:
            $ref: "#/definitions/Anime"
        404:
          description: "Anime not found."
    delete:
      tags:
      - anime
      summary: "Deletes an anime."
      description: ""
      operationId: "deleteAnime"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: header
        required: false
        type: "string"
      - name: "name"
        in: path
        description: "Name of anime to delete."
        required: true
        type: "string"
      responses:
        404:
          description: "Anime not found."
      security:
        - mediatracker_auth: [write]
  /movies:
    get:
      tags:
      - movies
      summary: "Get all movies."
      description: "Return all movies."
      operationId: "getMovies"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Operation successful."
    post:
      tags:
      - movies
      summary: "Add a new movie to the database."
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: body
        name: "body"
        description: "Movie object that needs to be added to the database."
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        405:
          description: "Invalid input."
      security:
        - mediatracker_auth: [write]
    put:
      tags:
        - movies
      summary: "Update an movie in the database."
      description: ""
      operationId: "updateMovie"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: body
        name: "body"
        description: "Movie object that needs to be added to the database."
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        404:
          description: "Movie not found."
        405:
          description: "Validation exception."
      security:
        - mediatracker_auth: [write]
  /movies/{name}:
    get:
      tags:
      - movies
      summary: "Find movie by name."
      description: "Returns a single movie."
      operationId: "getMovieByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: name
        in: path
        description: "Name of movie to return."
        required: true
        type: string
      responses:
        200:
          description: "Operation successful."
          schema:
            $ref: "#/definitions/Movie"
        404:
          description: "Movie not found."
    delete:
      tags:
      - movies
      summary: "Deletes a movie."
      description: ""
      operationId: "deleteMovie"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: header
        required: false
        type: "string"
      - name: "name"
        in: path
        description: "Name of movie to delete."
        required: true
        type: "string"
      responses:
        404:
          description: "Movie not found."
      security:
        - mediatracker_auth: [write]
securityDefinitions:
  mediatracker_auth:
    type: oauth2
    authorizationUrl: "http://spiral6.xyz/oauth/dialog"
    flow: implicit
    scopes:
      write: "Modify items in database."
      read: "Read items from database."
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Character:
    type: object
    required:
    - name
    properties:
      name:
        type: string
      actor:
        type: string
      picture:
        type: string
      actor_picture:
        type: string
  Anime:
    type: object
    required:
    - name
    - synopsis
    - format
    properties:
      name:
        type: object
        properties: 
          english: 
            type: string
            example: "Fullmetal Alchemist: Brotherhood"
          romanji:
            type: string
            example: "Hagane no Renkinjutsushi: Fullmetal Alchemist"
          native:
            type: string
            example: "鋼の錬金術師 FULLMETAL ALCHEMIST"
      format:
        type: string
        description: "Broadcast format of anime."
        enum:
          - "ONA"
          - "OVA"
          - "TV"
          - "Movie"
          - "Special"
          - "Music"
          - "TV Short"
      tags:
        type: array
        items:
          type: string
      genres:
        type: array
        items: 
          type: string
      synopsis:
        type: string
        description: "Anime synopsis."
      season:
        type: string
      duration:
        type: integer
        description: "Duration in minutes."
      release_date:
        type: string
        format: date
      studios:
        type: array
        items:
          type: string
      episodes:
        type: integer
        description: "Number of episodes."
      source:
        type: string
        description: "Original source of anime."
        enum:
           - "Original"
           - "Manga"
           - "Light Novel"
           - "Visual Novel"
           - "Novel"
           - "Video Game"
           - "Doujinshi"
      characters:
        type: array
        items:
          $ref: "#/definitions/Character"
      rating:
        type: number
        format: float
        description: "Rating out of 100."
    xml:
      name: Anime
  Movie:
    type: object
    required:
    - name
    - synopsis
    properties:
      name:
        type: string
        example: "The Godfather"
      synopsis:
        type: string
        description: "Movie synopsis."
      directors:
        type: array
        items:
          type: string
      writers:
        type: array
        items:
          type: string
      duration:
        type: integer
        description: "Duration in minutes."
      tags:
        type: array
        items:
          type: string
      genres:
        type: array
        items: 
          type: string
      release_date:
        type: string
        format: date
      characters:
        type: array
        items:
          $ref: "#/definitions/Character"
      rating:
        type: number
        format: float
        description: "Rating out of 100."
    xml:
      name: Movie
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: "Documentation."
  url: "http://spiral6.xyz/wiki/api"