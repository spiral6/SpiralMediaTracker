# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AnimeName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, english=None, romanji=None, native=None):  # noqa: E501
        """AnimeName - a model defined in OpenAPI

        :param english: The english of this AnimeName.  # noqa: E501
        :type english: str
        :param romanji: The romanji of this AnimeName.  # noqa: E501
        :type romanji: str
        :param native: The native of this AnimeName.  # noqa: E501
        :type native: str
        """
        self.openapi_types = {
            'english': str,
            'romanji': str,
            'native': str
        }

        self.attribute_map = {
            'english': 'english',
            'romanji': 'romanji',
            'native': 'native'
        }

        self._english = english
        self._romanji = romanji
        self._native = native

    @classmethod
    def from_dict(cls, dikt) -> 'AnimeName':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnimeName of this AnimeName.  # noqa: E501
        :rtype: AnimeName
        """
        return util.deserialize_model(dikt, cls)

    @property
    def english(self):
        """Gets the english of this AnimeName.


        :return: The english of this AnimeName.
        :rtype: str
        """
        return self._english

    @english.setter
    def english(self, english):
        """Sets the english of this AnimeName.


        :param english: The english of this AnimeName.
        :type english: str
        """
        if english is None:
            raise ValueError("Invalid value for `english`, must not be `None`")  # noqa: E501

        self._english = english

    @property
    def romanji(self):
        """Gets the romanji of this AnimeName.


        :return: The romanji of this AnimeName.
        :rtype: str
        """
        return self._romanji

    @romanji.setter
    def romanji(self, romanji):
        """Sets the romanji of this AnimeName.


        :param romanji: The romanji of this AnimeName.
        :type romanji: str
        """
        if romanji is None:
            raise ValueError("Invalid value for `romanji`, must not be `None`")  # noqa: E501

        self._romanji = romanji

    @property
    def native(self):
        """Gets the native of this AnimeName.


        :return: The native of this AnimeName.
        :rtype: str
        """
        return self._native

    @native.setter
    def native(self, native):
        """Sets the native of this AnimeName.


        :param native: The native of this AnimeName.
        :type native: str
        """
        if native is None:
            raise ValueError("Invalid value for `native`, must not be `None`")  # noqa: E501

        self._native = native
